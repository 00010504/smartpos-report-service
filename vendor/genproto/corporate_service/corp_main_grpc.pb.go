// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: corp_main.proto

package corporate_service

import (
	context "context"
	common "genproto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CorporateServiceClient is the client API for CorporateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CorporateServiceClient interface {
	// company service
	GetCompanyById(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*Company, error)
	UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetAllCompanies(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllCompaniesResponse, error)
	DeleteCompany(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error)
	// company type
	GetCompanyTypeById(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*CompanyType, error)
	CreateCompanyType(ctx context.Context, in *CreateCompanyTypeRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	UpdateCompanyType(ctx context.Context, in *UpdateCompanyTypeRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	DeleteCompanyType(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetAllCompanyTypes(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllCompanyTypeResponse, error)
	// shop service
	CreateShop(ctx context.Context, in *CreateShopRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetShopById(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*Shop, error)
	GetAllShops(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllShopsResponse, error)
	UpdateShop(ctx context.Context, in *UpdateShopRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	DeleteShop(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error)
	// cashbox service
	CreateCashbox(ctx context.Context, in *CreateCashboxRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetCashboxById(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*Cashbox, error)
	UpdateCashbox(ctx context.Context, in *UpdateCashboxRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetAllCashboxes(ctx context.Context, in *common.ShopSearchRequest, opts ...grpc.CallOption) (*GetAllCashboxesResponse, error)
	DeleteCashbox(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error)
	// payment_type
	CreatePaymentType(ctx context.Context, in *CreatePaymentTypeRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	UpdatePaymentType(ctx context.Context, in *UpdatePaymentTypeRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetAllPaymentTypes(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetPaymentTypesResponse, error)
	// company size
	CreateCompanySize(ctx context.Context, in *CreateCompanySizeRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetAllCompanySize(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllCompanySizeResponse, error)
	GetAllRecieptBlock(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllRecieptBlockResponse, error)
	CreateCheque(ctx context.Context, in *CreateChequeRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetAllCheques(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllChequesResponse, error)
	GetCheque(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*Cheque, error)
	DeleteCheque(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error)
	UpdateCheque(ctx context.Context, in *UpdateChequeRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
}

type corporateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCorporateServiceClient(cc grpc.ClientConnInterface) CorporateServiceClient {
	return &corporateServiceClient{cc}
}

func (c *corporateServiceClient) GetCompanyById(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*Company, error) {
	out := new(Company)
	err := c.cc.Invoke(ctx, "/CorporateService/GetCompanyById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) UpdateCompany(ctx context.Context, in *UpdateCompanyRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/UpdateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) CreateCompany(ctx context.Context, in *CreateCompanyRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/CreateCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) GetAllCompanies(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllCompaniesResponse, error) {
	out := new(GetAllCompaniesResponse)
	err := c.cc.Invoke(ctx, "/CorporateService/GetAllCompanies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) DeleteCompany(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/DeleteCompany", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) GetCompanyTypeById(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*CompanyType, error) {
	out := new(CompanyType)
	err := c.cc.Invoke(ctx, "/CorporateService/GetCompanyTypeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) CreateCompanyType(ctx context.Context, in *CreateCompanyTypeRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/CreateCompanyType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) UpdateCompanyType(ctx context.Context, in *UpdateCompanyTypeRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/UpdateCompanyType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) DeleteCompanyType(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/DeleteCompanyType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) GetAllCompanyTypes(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllCompanyTypeResponse, error) {
	out := new(GetAllCompanyTypeResponse)
	err := c.cc.Invoke(ctx, "/CorporateService/GetAllCompanyTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) CreateShop(ctx context.Context, in *CreateShopRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/CreateShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) GetShopById(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*Shop, error) {
	out := new(Shop)
	err := c.cc.Invoke(ctx, "/CorporateService/GetShopById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) GetAllShops(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllShopsResponse, error) {
	out := new(GetAllShopsResponse)
	err := c.cc.Invoke(ctx, "/CorporateService/GetAllShops", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) UpdateShop(ctx context.Context, in *UpdateShopRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/UpdateShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) DeleteShop(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/DeleteShop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) CreateCashbox(ctx context.Context, in *CreateCashboxRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/CreateCashbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) GetCashboxById(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*Cashbox, error) {
	out := new(Cashbox)
	err := c.cc.Invoke(ctx, "/CorporateService/GetCashboxById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) UpdateCashbox(ctx context.Context, in *UpdateCashboxRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/UpdateCashbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) GetAllCashboxes(ctx context.Context, in *common.ShopSearchRequest, opts ...grpc.CallOption) (*GetAllCashboxesResponse, error) {
	out := new(GetAllCashboxesResponse)
	err := c.cc.Invoke(ctx, "/CorporateService/GetAllCashboxes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) DeleteCashbox(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/DeleteCashbox", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) CreatePaymentType(ctx context.Context, in *CreatePaymentTypeRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/CreatePaymentType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) UpdatePaymentType(ctx context.Context, in *UpdatePaymentTypeRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/UpdatePaymentType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) GetAllPaymentTypes(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetPaymentTypesResponse, error) {
	out := new(GetPaymentTypesResponse)
	err := c.cc.Invoke(ctx, "/CorporateService/GetAllPaymentTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) CreateCompanySize(ctx context.Context, in *CreateCompanySizeRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/CreateCompanySize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) GetAllCompanySize(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllCompanySizeResponse, error) {
	out := new(GetAllCompanySizeResponse)
	err := c.cc.Invoke(ctx, "/CorporateService/GetAllCompanySize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) GetAllRecieptBlock(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllRecieptBlockResponse, error) {
	out := new(GetAllRecieptBlockResponse)
	err := c.cc.Invoke(ctx, "/CorporateService/GetAllRecieptBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) CreateCheque(ctx context.Context, in *CreateChequeRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/CreateCheque", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) GetAllCheques(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllChequesResponse, error) {
	out := new(GetAllChequesResponse)
	err := c.cc.Invoke(ctx, "/CorporateService/GetAllCheques", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) GetCheque(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*Cheque, error) {
	out := new(Cheque)
	err := c.cc.Invoke(ctx, "/CorporateService/GetCheque", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) DeleteCheque(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/DeleteCheque", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *corporateServiceClient) UpdateCheque(ctx context.Context, in *UpdateChequeRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/CorporateService/UpdateCheque", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CorporateServiceServer is the server API for CorporateService service.
// All implementations should embed UnimplementedCorporateServiceServer
// for forward compatibility
type CorporateServiceServer interface {
	// company service
	GetCompanyById(context.Context, *common.RequestID) (*Company, error)
	UpdateCompany(context.Context, *UpdateCompanyRequest) (*common.ResponseID, error)
	CreateCompany(context.Context, *CreateCompanyRequest) (*common.ResponseID, error)
	GetAllCompanies(context.Context, *common.SearchRequest) (*GetAllCompaniesResponse, error)
	DeleteCompany(context.Context, *common.RequestID) (*common.ResponseID, error)
	// company type
	GetCompanyTypeById(context.Context, *common.RequestID) (*CompanyType, error)
	CreateCompanyType(context.Context, *CreateCompanyTypeRequest) (*common.ResponseID, error)
	UpdateCompanyType(context.Context, *UpdateCompanyTypeRequest) (*common.ResponseID, error)
	DeleteCompanyType(context.Context, *common.RequestID) (*common.ResponseID, error)
	GetAllCompanyTypes(context.Context, *common.SearchRequest) (*GetAllCompanyTypeResponse, error)
	// shop service
	CreateShop(context.Context, *CreateShopRequest) (*common.ResponseID, error)
	GetShopById(context.Context, *common.RequestID) (*Shop, error)
	GetAllShops(context.Context, *common.SearchRequest) (*GetAllShopsResponse, error)
	UpdateShop(context.Context, *UpdateShopRequest) (*common.ResponseID, error)
	DeleteShop(context.Context, *common.RequestID) (*common.ResponseID, error)
	// cashbox service
	CreateCashbox(context.Context, *CreateCashboxRequest) (*common.ResponseID, error)
	GetCashboxById(context.Context, *common.RequestID) (*Cashbox, error)
	UpdateCashbox(context.Context, *UpdateCashboxRequest) (*common.ResponseID, error)
	GetAllCashboxes(context.Context, *common.ShopSearchRequest) (*GetAllCashboxesResponse, error)
	DeleteCashbox(context.Context, *common.RequestID) (*common.ResponseID, error)
	// payment_type
	CreatePaymentType(context.Context, *CreatePaymentTypeRequest) (*common.ResponseID, error)
	UpdatePaymentType(context.Context, *UpdatePaymentTypeRequest) (*common.ResponseID, error)
	GetAllPaymentTypes(context.Context, *common.SearchRequest) (*GetPaymentTypesResponse, error)
	// company size
	CreateCompanySize(context.Context, *CreateCompanySizeRequest) (*common.ResponseID, error)
	GetAllCompanySize(context.Context, *common.SearchRequest) (*GetAllCompanySizeResponse, error)
	GetAllRecieptBlock(context.Context, *common.SearchRequest) (*GetAllRecieptBlockResponse, error)
	CreateCheque(context.Context, *CreateChequeRequest) (*common.ResponseID, error)
	GetAllCheques(context.Context, *common.SearchRequest) (*GetAllChequesResponse, error)
	GetCheque(context.Context, *common.RequestID) (*Cheque, error)
	DeleteCheque(context.Context, *common.RequestID) (*common.ResponseID, error)
	UpdateCheque(context.Context, *UpdateChequeRequest) (*common.ResponseID, error)
}

// UnimplementedCorporateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCorporateServiceServer struct {
}

func (UnimplementedCorporateServiceServer) GetCompanyById(context.Context, *common.RequestID) (*Company, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyById not implemented")
}
func (UnimplementedCorporateServiceServer) UpdateCompany(context.Context, *UpdateCompanyRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompany not implemented")
}
func (UnimplementedCorporateServiceServer) CreateCompany(context.Context, *CreateCompanyRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompany not implemented")
}
func (UnimplementedCorporateServiceServer) GetAllCompanies(context.Context, *common.SearchRequest) (*GetAllCompaniesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCompanies not implemented")
}
func (UnimplementedCorporateServiceServer) DeleteCompany(context.Context, *common.RequestID) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompany not implemented")
}
func (UnimplementedCorporateServiceServer) GetCompanyTypeById(context.Context, *common.RequestID) (*CompanyType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompanyTypeById not implemented")
}
func (UnimplementedCorporateServiceServer) CreateCompanyType(context.Context, *CreateCompanyTypeRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompanyType not implemented")
}
func (UnimplementedCorporateServiceServer) UpdateCompanyType(context.Context, *UpdateCompanyTypeRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCompanyType not implemented")
}
func (UnimplementedCorporateServiceServer) DeleteCompanyType(context.Context, *common.RequestID) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCompanyType not implemented")
}
func (UnimplementedCorporateServiceServer) GetAllCompanyTypes(context.Context, *common.SearchRequest) (*GetAllCompanyTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCompanyTypes not implemented")
}
func (UnimplementedCorporateServiceServer) CreateShop(context.Context, *CreateShopRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShop not implemented")
}
func (UnimplementedCorporateServiceServer) GetShopById(context.Context, *common.RequestID) (*Shop, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShopById not implemented")
}
func (UnimplementedCorporateServiceServer) GetAllShops(context.Context, *common.SearchRequest) (*GetAllShopsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllShops not implemented")
}
func (UnimplementedCorporateServiceServer) UpdateShop(context.Context, *UpdateShopRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateShop not implemented")
}
func (UnimplementedCorporateServiceServer) DeleteShop(context.Context, *common.RequestID) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShop not implemented")
}
func (UnimplementedCorporateServiceServer) CreateCashbox(context.Context, *CreateCashboxRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCashbox not implemented")
}
func (UnimplementedCorporateServiceServer) GetCashboxById(context.Context, *common.RequestID) (*Cashbox, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCashboxById not implemented")
}
func (UnimplementedCorporateServiceServer) UpdateCashbox(context.Context, *UpdateCashboxRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCashbox not implemented")
}
func (UnimplementedCorporateServiceServer) GetAllCashboxes(context.Context, *common.ShopSearchRequest) (*GetAllCashboxesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCashboxes not implemented")
}
func (UnimplementedCorporateServiceServer) DeleteCashbox(context.Context, *common.RequestID) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCashbox not implemented")
}
func (UnimplementedCorporateServiceServer) CreatePaymentType(context.Context, *CreatePaymentTypeRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePaymentType not implemented")
}
func (UnimplementedCorporateServiceServer) UpdatePaymentType(context.Context, *UpdatePaymentTypeRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentType not implemented")
}
func (UnimplementedCorporateServiceServer) GetAllPaymentTypes(context.Context, *common.SearchRequest) (*GetPaymentTypesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPaymentTypes not implemented")
}
func (UnimplementedCorporateServiceServer) CreateCompanySize(context.Context, *CreateCompanySizeRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCompanySize not implemented")
}
func (UnimplementedCorporateServiceServer) GetAllCompanySize(context.Context, *common.SearchRequest) (*GetAllCompanySizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCompanySize not implemented")
}
func (UnimplementedCorporateServiceServer) GetAllRecieptBlock(context.Context, *common.SearchRequest) (*GetAllRecieptBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRecieptBlock not implemented")
}
func (UnimplementedCorporateServiceServer) CreateCheque(context.Context, *CreateChequeRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCheque not implemented")
}
func (UnimplementedCorporateServiceServer) GetAllCheques(context.Context, *common.SearchRequest) (*GetAllChequesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCheques not implemented")
}
func (UnimplementedCorporateServiceServer) GetCheque(context.Context, *common.RequestID) (*Cheque, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheque not implemented")
}
func (UnimplementedCorporateServiceServer) DeleteCheque(context.Context, *common.RequestID) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCheque not implemented")
}
func (UnimplementedCorporateServiceServer) UpdateCheque(context.Context, *UpdateChequeRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCheque not implemented")
}

// UnsafeCorporateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CorporateServiceServer will
// result in compilation errors.
type UnsafeCorporateServiceServer interface {
	mustEmbedUnimplementedCorporateServiceServer()
}

func RegisterCorporateServiceServer(s grpc.ServiceRegistrar, srv CorporateServiceServer) {
	s.RegisterService(&CorporateService_ServiceDesc, srv)
}

func _CorporateService_GetCompanyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).GetCompanyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/GetCompanyById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).GetCompanyById(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_UpdateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).UpdateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/UpdateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).UpdateCompany(ctx, req.(*UpdateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_CreateCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).CreateCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/CreateCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).CreateCompany(ctx, req.(*CreateCompanyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_GetAllCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).GetAllCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/GetAllCompanies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).GetAllCompanies(ctx, req.(*common.SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_DeleteCompany_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).DeleteCompany(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/DeleteCompany",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).DeleteCompany(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_GetCompanyTypeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).GetCompanyTypeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/GetCompanyTypeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).GetCompanyTypeById(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_CreateCompanyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanyTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).CreateCompanyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/CreateCompanyType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).CreateCompanyType(ctx, req.(*CreateCompanyTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_UpdateCompanyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCompanyTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).UpdateCompanyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/UpdateCompanyType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).UpdateCompanyType(ctx, req.(*UpdateCompanyTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_DeleteCompanyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).DeleteCompanyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/DeleteCompanyType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).DeleteCompanyType(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_GetAllCompanyTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).GetAllCompanyTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/GetAllCompanyTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).GetAllCompanyTypes(ctx, req.(*common.SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_CreateShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).CreateShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/CreateShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).CreateShop(ctx, req.(*CreateShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_GetShopById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).GetShopById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/GetShopById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).GetShopById(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_GetAllShops_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).GetAllShops(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/GetAllShops",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).GetAllShops(ctx, req.(*common.SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_UpdateShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateShopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).UpdateShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/UpdateShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).UpdateShop(ctx, req.(*UpdateShopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_DeleteShop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).DeleteShop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/DeleteShop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).DeleteShop(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_CreateCashbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCashboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).CreateCashbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/CreateCashbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).CreateCashbox(ctx, req.(*CreateCashboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_GetCashboxById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).GetCashboxById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/GetCashboxById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).GetCashboxById(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_UpdateCashbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCashboxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).UpdateCashbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/UpdateCashbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).UpdateCashbox(ctx, req.(*UpdateCashboxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_GetAllCashboxes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ShopSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).GetAllCashboxes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/GetAllCashboxes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).GetAllCashboxes(ctx, req.(*common.ShopSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_DeleteCashbox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).DeleteCashbox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/DeleteCashbox",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).DeleteCashbox(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_CreatePaymentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePaymentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).CreatePaymentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/CreatePaymentType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).CreatePaymentType(ctx, req.(*CreatePaymentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_UpdatePaymentType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).UpdatePaymentType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/UpdatePaymentType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).UpdatePaymentType(ctx, req.(*UpdatePaymentTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_GetAllPaymentTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).GetAllPaymentTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/GetAllPaymentTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).GetAllPaymentTypes(ctx, req.(*common.SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_CreateCompanySize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCompanySizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).CreateCompanySize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/CreateCompanySize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).CreateCompanySize(ctx, req.(*CreateCompanySizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_GetAllCompanySize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).GetAllCompanySize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/GetAllCompanySize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).GetAllCompanySize(ctx, req.(*common.SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_GetAllRecieptBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).GetAllRecieptBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/GetAllRecieptBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).GetAllRecieptBlock(ctx, req.(*common.SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_CreateCheque_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChequeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).CreateCheque(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/CreateCheque",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).CreateCheque(ctx, req.(*CreateChequeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_GetAllCheques_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).GetAllCheques(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/GetAllCheques",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).GetAllCheques(ctx, req.(*common.SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_GetCheque_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).GetCheque(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/GetCheque",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).GetCheque(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_DeleteCheque_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).DeleteCheque(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/DeleteCheque",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).DeleteCheque(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CorporateService_UpdateCheque_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChequeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CorporateServiceServer).UpdateCheque(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CorporateService/UpdateCheque",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CorporateServiceServer).UpdateCheque(ctx, req.(*UpdateChequeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CorporateService_ServiceDesc is the grpc.ServiceDesc for CorporateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CorporateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CorporateService",
	HandlerType: (*CorporateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompanyById",
			Handler:    _CorporateService_GetCompanyById_Handler,
		},
		{
			MethodName: "UpdateCompany",
			Handler:    _CorporateService_UpdateCompany_Handler,
		},
		{
			MethodName: "CreateCompany",
			Handler:    _CorporateService_CreateCompany_Handler,
		},
		{
			MethodName: "GetAllCompanies",
			Handler:    _CorporateService_GetAllCompanies_Handler,
		},
		{
			MethodName: "DeleteCompany",
			Handler:    _CorporateService_DeleteCompany_Handler,
		},
		{
			MethodName: "GetCompanyTypeById",
			Handler:    _CorporateService_GetCompanyTypeById_Handler,
		},
		{
			MethodName: "CreateCompanyType",
			Handler:    _CorporateService_CreateCompanyType_Handler,
		},
		{
			MethodName: "UpdateCompanyType",
			Handler:    _CorporateService_UpdateCompanyType_Handler,
		},
		{
			MethodName: "DeleteCompanyType",
			Handler:    _CorporateService_DeleteCompanyType_Handler,
		},
		{
			MethodName: "GetAllCompanyTypes",
			Handler:    _CorporateService_GetAllCompanyTypes_Handler,
		},
		{
			MethodName: "CreateShop",
			Handler:    _CorporateService_CreateShop_Handler,
		},
		{
			MethodName: "GetShopById",
			Handler:    _CorporateService_GetShopById_Handler,
		},
		{
			MethodName: "GetAllShops",
			Handler:    _CorporateService_GetAllShops_Handler,
		},
		{
			MethodName: "UpdateShop",
			Handler:    _CorporateService_UpdateShop_Handler,
		},
		{
			MethodName: "DeleteShop",
			Handler:    _CorporateService_DeleteShop_Handler,
		},
		{
			MethodName: "CreateCashbox",
			Handler:    _CorporateService_CreateCashbox_Handler,
		},
		{
			MethodName: "GetCashboxById",
			Handler:    _CorporateService_GetCashboxById_Handler,
		},
		{
			MethodName: "UpdateCashbox",
			Handler:    _CorporateService_UpdateCashbox_Handler,
		},
		{
			MethodName: "GetAllCashboxes",
			Handler:    _CorporateService_GetAllCashboxes_Handler,
		},
		{
			MethodName: "DeleteCashbox",
			Handler:    _CorporateService_DeleteCashbox_Handler,
		},
		{
			MethodName: "CreatePaymentType",
			Handler:    _CorporateService_CreatePaymentType_Handler,
		},
		{
			MethodName: "UpdatePaymentType",
			Handler:    _CorporateService_UpdatePaymentType_Handler,
		},
		{
			MethodName: "GetAllPaymentTypes",
			Handler:    _CorporateService_GetAllPaymentTypes_Handler,
		},
		{
			MethodName: "CreateCompanySize",
			Handler:    _CorporateService_CreateCompanySize_Handler,
		},
		{
			MethodName: "GetAllCompanySize",
			Handler:    _CorporateService_GetAllCompanySize_Handler,
		},
		{
			MethodName: "GetAllRecieptBlock",
			Handler:    _CorporateService_GetAllRecieptBlock_Handler,
		},
		{
			MethodName: "CreateCheque",
			Handler:    _CorporateService_CreateCheque_Handler,
		},
		{
			MethodName: "GetAllCheques",
			Handler:    _CorporateService_GetAllCheques_Handler,
		},
		{
			MethodName: "GetCheque",
			Handler:    _CorporateService_GetCheque_Handler,
		},
		{
			MethodName: "DeleteCheque",
			Handler:    _CorporateService_DeleteCheque_Handler,
		},
		{
			MethodName: "UpdateCheque",
			Handler:    _CorporateService_UpdateCheque_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "corp_main.proto",
}
