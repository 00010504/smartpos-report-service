// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: auth.proto

package auth_service

import (
	context "context"
	common "genproto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	ProfileUpdate(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	// modules and sections
	CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetAllModules(ctx context.Context, in *GetAllModulesRequest, opts ...grpc.CallOption) (*GetAllModulesResponse, error)
	CreateSection(ctx context.Context, in *CreateSectionRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	// role and permissions
	CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	DeleteRole(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error)
	UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetAllRoles(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllRolesResponse, error)
	GetRole(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*Role, error)
	// user and profile
	CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetProfile(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*Profile, error)
	GetUser(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*User, error)
	GetUserByPhoneNumber(ctx context.Context, in *GetUserByPhoneNumberRequest, opts ...grpc.CallOption) (*GetUserByPhoneNumberResponse, error)
	SetAsVerified(ctx context.Context, in *GetUserByPhoneNumberRequest, opts ...grpc.CallOption) (*GetUserByPhoneNumberResponse, error)
	SearchUserByPhoneNumber(ctx context.Context, in *SearchUserByPhoneNumberRequest, opts ...grpc.CallOption) (*SearchUSerByPhoneNumberResponse, error)
	GetUserPermission(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*GetAllUserPermissionResponse, error)
	ChangePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	CreateEmployee(ctx context.Context, in *CreateEmployeeRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetAllEmployees(ctx context.Context, in *GetAllEmployeesRequest, opts ...grpc.CallOption) (*GetAllEmployeesResponse, error)
	Delete(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetEmployeeById(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*ShortEmployee, error)
	UpdateEmployee(ctx context.Context, in *UpdateEmployeeRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Auth/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Verify(ctx context.Context, in *VerifyRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Auth/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ProfileUpdate(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Auth/ProfileUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ForgotPassword(ctx context.Context, in *ForgotPasswordRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Auth/ForgotPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateModule(ctx context.Context, in *CreateModuleRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Auth/CreateModule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetAllModules(ctx context.Context, in *GetAllModulesRequest, opts ...grpc.CallOption) (*GetAllModulesResponse, error) {
	out := new(GetAllModulesResponse)
	err := c.cc.Invoke(ctx, "/Auth/GetAllModules", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateSection(ctx context.Context, in *CreateSectionRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Auth/CreateSection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateRole(ctx context.Context, in *CreateRoleRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Auth/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) DeleteRole(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Auth/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateRole(ctx context.Context, in *UpdateRoleRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Auth/UpdateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetAllRoles(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllRolesResponse, error) {
	out := new(GetAllRolesResponse)
	err := c.cc.Invoke(ctx, "/Auth/GetAllRoles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetRole(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*Role, error) {
	out := new(Role)
	err := c.cc.Invoke(ctx, "/Auth/GetRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateUser(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Auth/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateProfile(ctx context.Context, in *CreateProfileRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Auth/CreateProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetProfile(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/Auth/GetProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUser(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/Auth/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserByPhoneNumber(ctx context.Context, in *GetUserByPhoneNumberRequest, opts ...grpc.CallOption) (*GetUserByPhoneNumberResponse, error) {
	out := new(GetUserByPhoneNumberResponse)
	err := c.cc.Invoke(ctx, "/Auth/GetUserByPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SetAsVerified(ctx context.Context, in *GetUserByPhoneNumberRequest, opts ...grpc.CallOption) (*GetUserByPhoneNumberResponse, error) {
	out := new(GetUserByPhoneNumberResponse)
	err := c.cc.Invoke(ctx, "/Auth/SetAsVerified", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) SearchUserByPhoneNumber(ctx context.Context, in *SearchUserByPhoneNumberRequest, opts ...grpc.CallOption) (*SearchUSerByPhoneNumberResponse, error) {
	out := new(SearchUSerByPhoneNumberResponse)
	err := c.cc.Invoke(ctx, "/Auth/SearchUserByPhoneNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetUserPermission(ctx context.Context, in *common.Request, opts ...grpc.CallOption) (*GetAllUserPermissionResponse, error) {
	out := new(GetAllUserPermissionResponse)
	err := c.cc.Invoke(ctx, "/Auth/GetUserPermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) ChangePassword(ctx context.Context, in *UpdatePasswordRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Auth/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) CreateEmployee(ctx context.Context, in *CreateEmployeeRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Auth/CreateEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetAllEmployees(ctx context.Context, in *GetAllEmployeesRequest, opts ...grpc.CallOption) (*GetAllEmployeesResponse, error) {
	out := new(GetAllEmployeesResponse)
	err := c.cc.Invoke(ctx, "/Auth/GetAllEmployees", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) Delete(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Auth/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) GetEmployeeById(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*ShortEmployee, error) {
	out := new(ShortEmployee)
	err := c.cc.Invoke(ctx, "/Auth/GetEmployeeById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authClient) UpdateEmployee(ctx context.Context, in *UpdateEmployeeRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Auth/UpdateEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations should embed UnimplementedAuthServer
// for forward compatibility
type AuthServer interface {
	Login(context.Context, *LoginRequest) (*common.ResponseID, error)
	Verify(context.Context, *VerifyRequest) (*common.ResponseID, error)
	ProfileUpdate(context.Context, *UpdateProfileRequest) (*common.ResponseID, error)
	ForgotPassword(context.Context, *ForgotPasswordRequest) (*common.ResponseID, error)
	// modules and sections
	CreateModule(context.Context, *CreateModuleRequest) (*common.ResponseID, error)
	GetAllModules(context.Context, *GetAllModulesRequest) (*GetAllModulesResponse, error)
	CreateSection(context.Context, *CreateSectionRequest) (*common.ResponseID, error)
	// role and permissions
	CreateRole(context.Context, *CreateRoleRequest) (*common.ResponseID, error)
	DeleteRole(context.Context, *common.RequestID) (*common.ResponseID, error)
	UpdateRole(context.Context, *UpdateRoleRequest) (*common.ResponseID, error)
	GetAllRoles(context.Context, *common.SearchRequest) (*GetAllRolesResponse, error)
	GetRole(context.Context, *common.RequestID) (*Role, error)
	// user and profile
	CreateUser(context.Context, *CreateUserRequest) (*common.ResponseID, error)
	CreateProfile(context.Context, *CreateProfileRequest) (*common.ResponseID, error)
	GetProfile(context.Context, *common.Request) (*Profile, error)
	GetUser(context.Context, *common.Request) (*User, error)
	GetUserByPhoneNumber(context.Context, *GetUserByPhoneNumberRequest) (*GetUserByPhoneNumberResponse, error)
	SetAsVerified(context.Context, *GetUserByPhoneNumberRequest) (*GetUserByPhoneNumberResponse, error)
	SearchUserByPhoneNumber(context.Context, *SearchUserByPhoneNumberRequest) (*SearchUSerByPhoneNumberResponse, error)
	GetUserPermission(context.Context, *common.Request) (*GetAllUserPermissionResponse, error)
	ChangePassword(context.Context, *UpdatePasswordRequest) (*common.ResponseID, error)
	CreateEmployee(context.Context, *CreateEmployeeRequest) (*common.ResponseID, error)
	GetAllEmployees(context.Context, *GetAllEmployeesRequest) (*GetAllEmployeesResponse, error)
	Delete(context.Context, *common.RequestID) (*common.ResponseID, error)
	GetEmployeeById(context.Context, *common.RequestID) (*ShortEmployee, error)
	UpdateEmployee(context.Context, *UpdateEmployeeRequest) (*common.ResponseID, error)
}

// UnimplementedAuthServer should be embedded to have forward compatible implementations.
type UnimplementedAuthServer struct {
}

func (UnimplementedAuthServer) Login(context.Context, *LoginRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthServer) Verify(context.Context, *VerifyRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedAuthServer) ProfileUpdate(context.Context, *UpdateProfileRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileUpdate not implemented")
}
func (UnimplementedAuthServer) ForgotPassword(context.Context, *ForgotPasswordRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPassword not implemented")
}
func (UnimplementedAuthServer) CreateModule(context.Context, *CreateModuleRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateModule not implemented")
}
func (UnimplementedAuthServer) GetAllModules(context.Context, *GetAllModulesRequest) (*GetAllModulesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllModules not implemented")
}
func (UnimplementedAuthServer) CreateSection(context.Context, *CreateSectionRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSection not implemented")
}
func (UnimplementedAuthServer) CreateRole(context.Context, *CreateRoleRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedAuthServer) DeleteRole(context.Context, *common.RequestID) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedAuthServer) UpdateRole(context.Context, *UpdateRoleRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRole not implemented")
}
func (UnimplementedAuthServer) GetAllRoles(context.Context, *common.SearchRequest) (*GetAllRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRoles not implemented")
}
func (UnimplementedAuthServer) GetRole(context.Context, *common.RequestID) (*Role, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRole not implemented")
}
func (UnimplementedAuthServer) CreateUser(context.Context, *CreateUserRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedAuthServer) CreateProfile(context.Context, *CreateProfileRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProfile not implemented")
}
func (UnimplementedAuthServer) GetProfile(context.Context, *common.Request) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedAuthServer) GetUser(context.Context, *common.Request) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedAuthServer) GetUserByPhoneNumber(context.Context, *GetUserByPhoneNumberRequest) (*GetUserByPhoneNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByPhoneNumber not implemented")
}
func (UnimplementedAuthServer) SetAsVerified(context.Context, *GetUserByPhoneNumberRequest) (*GetUserByPhoneNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAsVerified not implemented")
}
func (UnimplementedAuthServer) SearchUserByPhoneNumber(context.Context, *SearchUserByPhoneNumberRequest) (*SearchUSerByPhoneNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserByPhoneNumber not implemented")
}
func (UnimplementedAuthServer) GetUserPermission(context.Context, *common.Request) (*GetAllUserPermissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserPermission not implemented")
}
func (UnimplementedAuthServer) ChangePassword(context.Context, *UpdatePasswordRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedAuthServer) CreateEmployee(context.Context, *CreateEmployeeRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployee not implemented")
}
func (UnimplementedAuthServer) GetAllEmployees(context.Context, *GetAllEmployeesRequest) (*GetAllEmployeesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllEmployees not implemented")
}
func (UnimplementedAuthServer) Delete(context.Context, *common.RequestID) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAuthServer) GetEmployeeById(context.Context, *common.RequestID) (*ShortEmployee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployeeById not implemented")
}
func (UnimplementedAuthServer) UpdateEmployee(context.Context, *UpdateEmployeeRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmployee not implemented")
}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Verify(ctx, req.(*VerifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ProfileUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ProfileUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/ProfileUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ProfileUpdate(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForgotPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/ForgotPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ForgotPassword(ctx, req.(*ForgotPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateModule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateModuleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateModule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/CreateModule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateModule(ctx, req.(*CreateModuleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetAllModules_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllModulesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetAllModules(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/GetAllModules",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetAllModules(ctx, req.(*GetAllModulesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateSection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateSection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/CreateSection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateSection(ctx, req.(*CreateSectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateRole(ctx, req.(*CreateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).DeleteRole(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/UpdateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateRole(ctx, req.(*UpdateRoleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetAllRoles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetAllRoles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/GetAllRoles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetAllRoles(ctx, req.(*common.SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/GetRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetRole(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateUser(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/CreateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateProfile(ctx, req.(*CreateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/GetProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetProfile(ctx, req.(*common.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUser(ctx, req.(*common.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUserByPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUserByPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/GetUserByPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUserByPhoneNumber(ctx, req.(*GetUserByPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SetAsVerified_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SetAsVerified(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/SetAsVerified",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SetAsVerified(ctx, req.(*GetUserByPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_SearchUserByPhoneNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserByPhoneNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).SearchUserByPhoneNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/SearchUserByPhoneNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).SearchUserByPhoneNumber(ctx, req.(*SearchUserByPhoneNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetUserPermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetUserPermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/GetUserPermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetUserPermission(ctx, req.(*common.Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).ChangePassword(ctx, req.(*UpdatePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/CreateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).CreateEmployee(ctx, req.(*CreateEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetAllEmployees_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllEmployeesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetAllEmployees(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/GetAllEmployees",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetAllEmployees(ctx, req.(*GetAllEmployeesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Delete(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_GetEmployeeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).GetEmployeeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/GetEmployeeById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).GetEmployeeById(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Auth_UpdateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmployeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).UpdateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auth/UpdateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).UpdateEmployee(ctx, req.(*UpdateEmployeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Auth_Login_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _Auth_Verify_Handler,
		},
		{
			MethodName: "ProfileUpdate",
			Handler:    _Auth_ProfileUpdate_Handler,
		},
		{
			MethodName: "ForgotPassword",
			Handler:    _Auth_ForgotPassword_Handler,
		},
		{
			MethodName: "CreateModule",
			Handler:    _Auth_CreateModule_Handler,
		},
		{
			MethodName: "GetAllModules",
			Handler:    _Auth_GetAllModules_Handler,
		},
		{
			MethodName: "CreateSection",
			Handler:    _Auth_CreateSection_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _Auth_CreateRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _Auth_DeleteRole_Handler,
		},
		{
			MethodName: "UpdateRole",
			Handler:    _Auth_UpdateRole_Handler,
		},
		{
			MethodName: "GetAllRoles",
			Handler:    _Auth_GetAllRoles_Handler,
		},
		{
			MethodName: "GetRole",
			Handler:    _Auth_GetRole_Handler,
		},
		{
			MethodName: "CreateUser",
			Handler:    _Auth_CreateUser_Handler,
		},
		{
			MethodName: "CreateProfile",
			Handler:    _Auth_CreateProfile_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _Auth_GetProfile_Handler,
		},
		{
			MethodName: "GetUser",
			Handler:    _Auth_GetUser_Handler,
		},
		{
			MethodName: "GetUserByPhoneNumber",
			Handler:    _Auth_GetUserByPhoneNumber_Handler,
		},
		{
			MethodName: "SetAsVerified",
			Handler:    _Auth_SetAsVerified_Handler,
		},
		{
			MethodName: "SearchUserByPhoneNumber",
			Handler:    _Auth_SearchUserByPhoneNumber_Handler,
		},
		{
			MethodName: "GetUserPermission",
			Handler:    _Auth_GetUserPermission_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Auth_ChangePassword_Handler,
		},
		{
			MethodName: "CreateEmployee",
			Handler:    _Auth_CreateEmployee_Handler,
		},
		{
			MethodName: "GetAllEmployees",
			Handler:    _Auth_GetAllEmployees_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Auth_Delete_Handler,
		},
		{
			MethodName: "GetEmployeeById",
			Handler:    _Auth_GetEmployeeById_Handler,
		},
		{
			MethodName: "UpdateEmployee",
			Handler:    _Auth_UpdateEmployee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
