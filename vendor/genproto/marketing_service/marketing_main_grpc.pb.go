// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: marketing_main.proto

package marketing_service

import (
	context "context"
	common "genproto/common"
	order_service "genproto/order_service"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketingClient is the client API for Marketing service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketingClient interface {
	CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetAllClients(ctx context.Context, in *GetAllClientsRequest, opts ...grpc.CallOption) (*GetAllClientsResponse, error)
	UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	DeleteClient(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetClientByID(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*GetClientByIDResponse, error)
	AddOrder(ctx context.Context, in *order_service.CreateOrderCopyRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
}

type marketingClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketingClient(cc grpc.ClientConnInterface) MarketingClient {
	return &marketingClient{cc}
}

func (c *marketingClient) CreateClient(ctx context.Context, in *CreateClientRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Marketing/CreateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingClient) GetAllClients(ctx context.Context, in *GetAllClientsRequest, opts ...grpc.CallOption) (*GetAllClientsResponse, error) {
	out := new(GetAllClientsResponse)
	err := c.cc.Invoke(ctx, "/Marketing/GetAllClients", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingClient) UpdateClient(ctx context.Context, in *UpdateClientRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Marketing/UpdateClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingClient) DeleteClient(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Marketing/DeleteClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingClient) GetClientByID(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*GetClientByIDResponse, error) {
	out := new(GetClientByIDResponse)
	err := c.cc.Invoke(ctx, "/Marketing/GetClientByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketingClient) AddOrder(ctx context.Context, in *order_service.CreateOrderCopyRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/Marketing/AddOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketingServer is the server API for Marketing service.
// All implementations should embed UnimplementedMarketingServer
// for forward compatibility
type MarketingServer interface {
	CreateClient(context.Context, *CreateClientRequest) (*common.ResponseID, error)
	GetAllClients(context.Context, *GetAllClientsRequest) (*GetAllClientsResponse, error)
	UpdateClient(context.Context, *UpdateClientRequest) (*common.ResponseID, error)
	DeleteClient(context.Context, *common.RequestID) (*common.ResponseID, error)
	GetClientByID(context.Context, *common.RequestID) (*GetClientByIDResponse, error)
	AddOrder(context.Context, *order_service.CreateOrderCopyRequest) (*common.ResponseID, error)
}

// UnimplementedMarketingServer should be embedded to have forward compatible implementations.
type UnimplementedMarketingServer struct {
}

func (UnimplementedMarketingServer) CreateClient(context.Context, *CreateClientRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedMarketingServer) GetAllClients(context.Context, *GetAllClientsRequest) (*GetAllClientsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllClients not implemented")
}
func (UnimplementedMarketingServer) UpdateClient(context.Context, *UpdateClientRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClient not implemented")
}
func (UnimplementedMarketingServer) DeleteClient(context.Context, *common.RequestID) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (UnimplementedMarketingServer) GetClientByID(context.Context, *common.RequestID) (*GetClientByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientByID not implemented")
}
func (UnimplementedMarketingServer) AddOrder(context.Context, *order_service.CreateOrderCopyRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}

// UnsafeMarketingServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketingServer will
// result in compilation errors.
type UnsafeMarketingServer interface {
	mustEmbedUnimplementedMarketingServer()
}

func RegisterMarketingServer(s grpc.ServiceRegistrar, srv MarketingServer) {
	s.RegisterService(&Marketing_ServiceDesc, srv)
}

func _Marketing_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Marketing/CreateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingServer).CreateClient(ctx, req.(*CreateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketing_GetAllClients_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllClientsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingServer).GetAllClients(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Marketing/GetAllClients",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingServer).GetAllClients(ctx, req.(*GetAllClientsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketing_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Marketing/UpdateClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingServer).UpdateClient(ctx, req.(*UpdateClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketing_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Marketing/DeleteClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingServer).DeleteClient(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketing_GetClientByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingServer).GetClientByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Marketing/GetClientByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingServer).GetClientByID(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Marketing_AddOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(order_service.CreateOrderCopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketingServer).AddOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Marketing/AddOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketingServer).AddOrder(ctx, req.(*order_service.CreateOrderCopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Marketing_ServiceDesc is the grpc.ServiceDesc for Marketing service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Marketing_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Marketing",
	HandlerType: (*MarketingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _Marketing_CreateClient_Handler,
		},
		{
			MethodName: "GetAllClients",
			Handler:    _Marketing_GetAllClients_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _Marketing_UpdateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _Marketing_DeleteClient_Handler,
		},
		{
			MethodName: "GetClientByID",
			Handler:    _Marketing_GetClientByID_Handler,
		},
		{
			MethodName: "AddOrder",
			Handler:    _Marketing_AddOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "marketing_main.proto",
}
