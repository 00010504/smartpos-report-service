// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: inventory_main.proto

package inventory_service

import (
	context "context"
	common "genproto/common"
	order_service "genproto/order_service"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InventoryServiceClient is the client API for InventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InventoryServiceClient interface {
	// import
	CreateImport(ctx context.Context, in *CreateImportRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	CreateOrder(ctx context.Context, in *order_service.CreateOrderCopyRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	FinishImport(ctx context.Context, in *FinishImportReq, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetAllImport(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllImportRes, error)
	GetImportByID(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*ImportById, error)
	// supplier
	CreateSupplier(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetAllSupplier(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllSuppliersResponse, error)
	UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetSupplierById(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*GetSupplierByIdResponse, error)
	Delete(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error)
	// supplierOrder
	CreateSupplierOrder(ctx context.Context, in *CreateSupplierOrderRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	UpsertSupplierOrderItem(ctx context.Context, in *CreateSupplierOrderItemRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetAllSupplierOrder(ctx context.Context, in *common.SupplierOrderSearchRequest, opts ...grpc.CallOption) (*GetAllSupplierOrderResponse, error)
	GetAllSupplierOrderItems(ctx context.Context, in *GetAllSupplierOrderItemsRequest, opts ...grpc.CallOption) (*GetAllSupplierOrderItemsResponse, error)
	GetSupplierOrderById(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*GetSupplierOrderByIdResponse, error)
	UpdateSupplierOrderStatus(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error)
	FinishSupplierOrder(ctx context.Context, in *FinishSupplierOrderRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	UpdateSupplierOrderAmount(ctx context.Context, in *UpdateSupplierOrderRecivedRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	DeleteSupplierOrder(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error)
	DeleteSupplierOrderItemById(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.Empty, error)
	DeleteSupplierOrders(ctx context.Context, in *common.RequestIDs, opts ...grpc.CallOption) (*common.Empty, error)
	// product
	GetProductHistory(ctx context.Context, in *GetProductHistoryReq, opts ...grpc.CallOption) (*GetProductHistoryRes, error)
	// exel download
	CreateDownloadExelTemplate(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error)
	CreateWriteOffExelTemplate(ctx context.Context, in *GetWriteOffReq, opts ...grpc.CallOption) (*common.ResponseID, error)
	CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetAllTransfer(ctx context.Context, in *GetAllTransferRequest, opts ...grpc.CallOption) (*GetAllTransferResponse, error)
	GetAllTransferItems(ctx context.Context, in *GetAllTransferItemsRequest, opts ...grpc.CallOption) (*GetAllTransferItemsResponse, error)
	AddItemToTransfer(ctx context.Context, in *AddItemToTransferRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	// Write OFf
	CreateWriteOff(ctx context.Context, in *CreateWriteOffRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	UpdateToWriteOff(ctx context.Context, in *UpdateWriteOffRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	AddProductToWriteOff(ctx context.Context, in *AddProductToWriteOffRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	DeleteProductWriteOff(ctx context.Context, in *AddProductToWriteOffRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	FinishWriteOff(ctx context.Context, in *FinishWriteOffReq, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetAllWriteOff(ctx context.Context, in *GetAllWriteOffReq, opts ...grpc.CallOption) (*GetAllWriteOffRes, error)
	GetWriteOffByid(ctx context.Context, in *GetWriteOffReq, opts ...grpc.CallOption) (*GetWriteOffRes, error)
	GetWriteOffItems(ctx context.Context, in *GetWriteOffReq, opts ...grpc.CallOption) (*GetWriteOffItemsRes, error)
	DeleteWriteOff(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error)
	// repricing
	GetRepricingByID(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*GetRepricingByIDResponse, error)
	CreateRepricing(ctx context.Context, in *CreateRepricingRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	GetAllRepricing(ctx context.Context, in *GetAllRepricingRequest, opts ...grpc.CallOption) (*GetAllRepricingResponse, error)
	GetAllRepricingItems(ctx context.Context, in *GetAllRepricingItemsRequest, opts ...grpc.CallOption) (*GetAllRepricingItemsResponse, error)
	UpsertMultiItemToRepricing(ctx context.Context, in *UpsertMultiItemRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	FinishRepricing(ctx context.Context, in *FinishRepricingRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	DeleteRepricing(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error)
	RepricingBulkChangePrice(ctx context.Context, in *BulkChangePriceRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
	DeleteRepricingItem(ctx context.Context, in *common.ItemIdRequest, opts ...grpc.CallOption) (*common.ResponseID, error)
}

type inventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInventoryServiceClient(cc grpc.ClientConnInterface) InventoryServiceClient {
	return &inventoryServiceClient{cc}
}

func (c *inventoryServiceClient) CreateImport(ctx context.Context, in *CreateImportRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/CreateImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateOrder(ctx context.Context, in *order_service.CreateOrderCopyRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/CreateOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) FinishImport(ctx context.Context, in *FinishImportReq, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/FinishImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetAllImport(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllImportRes, error) {
	out := new(GetAllImportRes)
	err := c.cc.Invoke(ctx, "/InventoryService/GetAllImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetImportByID(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*ImportById, error) {
	out := new(ImportById)
	err := c.cc.Invoke(ctx, "/InventoryService/GetImportByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateSupplier(ctx context.Context, in *CreateSupplierRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/CreateSupplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetAllSupplier(ctx context.Context, in *common.SearchRequest, opts ...grpc.CallOption) (*GetAllSuppliersResponse, error) {
	out := new(GetAllSuppliersResponse)
	err := c.cc.Invoke(ctx, "/InventoryService/GetAllSupplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateSupplier(ctx context.Context, in *UpdateSupplierRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/UpdateSupplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetSupplierById(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*GetSupplierByIdResponse, error) {
	out := new(GetSupplierByIdResponse)
	err := c.cc.Invoke(ctx, "/InventoryService/GetSupplierById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) Delete(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateSupplierOrder(ctx context.Context, in *CreateSupplierOrderRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/CreateSupplierOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpsertSupplierOrderItem(ctx context.Context, in *CreateSupplierOrderItemRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/UpsertSupplierOrderItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetAllSupplierOrder(ctx context.Context, in *common.SupplierOrderSearchRequest, opts ...grpc.CallOption) (*GetAllSupplierOrderResponse, error) {
	out := new(GetAllSupplierOrderResponse)
	err := c.cc.Invoke(ctx, "/InventoryService/GetAllSupplierOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetAllSupplierOrderItems(ctx context.Context, in *GetAllSupplierOrderItemsRequest, opts ...grpc.CallOption) (*GetAllSupplierOrderItemsResponse, error) {
	out := new(GetAllSupplierOrderItemsResponse)
	err := c.cc.Invoke(ctx, "/InventoryService/GetAllSupplierOrderItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetSupplierOrderById(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*GetSupplierOrderByIdResponse, error) {
	out := new(GetSupplierOrderByIdResponse)
	err := c.cc.Invoke(ctx, "/InventoryService/GetSupplierOrderById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateSupplierOrderStatus(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/UpdateSupplierOrderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) FinishSupplierOrder(ctx context.Context, in *FinishSupplierOrderRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/FinishSupplierOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateSupplierOrderAmount(ctx context.Context, in *UpdateSupplierOrderRecivedRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/UpdateSupplierOrderAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteSupplierOrder(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/DeleteSupplierOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteSupplierOrderItemById(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/InventoryService/DeleteSupplierOrderItemById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteSupplierOrders(ctx context.Context, in *common.RequestIDs, opts ...grpc.CallOption) (*common.Empty, error) {
	out := new(common.Empty)
	err := c.cc.Invoke(ctx, "/InventoryService/DeleteSupplierOrders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetProductHistory(ctx context.Context, in *GetProductHistoryReq, opts ...grpc.CallOption) (*GetProductHistoryRes, error) {
	out := new(GetProductHistoryRes)
	err := c.cc.Invoke(ctx, "/InventoryService/GetProductHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateDownloadExelTemplate(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/CreateDownloadExelTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateWriteOffExelTemplate(ctx context.Context, in *GetWriteOffReq, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/CreateWriteOffExelTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateTransfer(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/CreateTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetAllTransfer(ctx context.Context, in *GetAllTransferRequest, opts ...grpc.CallOption) (*GetAllTransferResponse, error) {
	out := new(GetAllTransferResponse)
	err := c.cc.Invoke(ctx, "/InventoryService/GetAllTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetAllTransferItems(ctx context.Context, in *GetAllTransferItemsRequest, opts ...grpc.CallOption) (*GetAllTransferItemsResponse, error) {
	out := new(GetAllTransferItemsResponse)
	err := c.cc.Invoke(ctx, "/InventoryService/GetAllTransferItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) AddItemToTransfer(ctx context.Context, in *AddItemToTransferRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/AddItemToTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateWriteOff(ctx context.Context, in *CreateWriteOffRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/CreateWriteOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpdateToWriteOff(ctx context.Context, in *UpdateWriteOffRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/UpdateToWriteOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) AddProductToWriteOff(ctx context.Context, in *AddProductToWriteOffRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/AddProductToWriteOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteProductWriteOff(ctx context.Context, in *AddProductToWriteOffRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/DeleteProductWriteOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) FinishWriteOff(ctx context.Context, in *FinishWriteOffReq, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/FinishWriteOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetAllWriteOff(ctx context.Context, in *GetAllWriteOffReq, opts ...grpc.CallOption) (*GetAllWriteOffRes, error) {
	out := new(GetAllWriteOffRes)
	err := c.cc.Invoke(ctx, "/InventoryService/GetAllWriteOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetWriteOffByid(ctx context.Context, in *GetWriteOffReq, opts ...grpc.CallOption) (*GetWriteOffRes, error) {
	out := new(GetWriteOffRes)
	err := c.cc.Invoke(ctx, "/InventoryService/GetWriteOffByid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetWriteOffItems(ctx context.Context, in *GetWriteOffReq, opts ...grpc.CallOption) (*GetWriteOffItemsRes, error) {
	out := new(GetWriteOffItemsRes)
	err := c.cc.Invoke(ctx, "/InventoryService/GetWriteOffItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteWriteOff(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/DeleteWriteOff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetRepricingByID(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*GetRepricingByIDResponse, error) {
	out := new(GetRepricingByIDResponse)
	err := c.cc.Invoke(ctx, "/InventoryService/GetRepricingByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) CreateRepricing(ctx context.Context, in *CreateRepricingRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/CreateRepricing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetAllRepricing(ctx context.Context, in *GetAllRepricingRequest, opts ...grpc.CallOption) (*GetAllRepricingResponse, error) {
	out := new(GetAllRepricingResponse)
	err := c.cc.Invoke(ctx, "/InventoryService/GetAllRepricing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) GetAllRepricingItems(ctx context.Context, in *GetAllRepricingItemsRequest, opts ...grpc.CallOption) (*GetAllRepricingItemsResponse, error) {
	out := new(GetAllRepricingItemsResponse)
	err := c.cc.Invoke(ctx, "/InventoryService/GetAllRepricingItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) UpsertMultiItemToRepricing(ctx context.Context, in *UpsertMultiItemRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/UpsertMultiItemToRepricing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) FinishRepricing(ctx context.Context, in *FinishRepricingRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/FinishRepricing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteRepricing(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/DeleteRepricing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) RepricingBulkChangePrice(ctx context.Context, in *BulkChangePriceRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/RepricingBulkChangePrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *inventoryServiceClient) DeleteRepricingItem(ctx context.Context, in *common.ItemIdRequest, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/InventoryService/DeleteRepricingItem", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InventoryServiceServer is the server API for InventoryService service.
// All implementations should embed UnimplementedInventoryServiceServer
// for forward compatibility
type InventoryServiceServer interface {
	// import
	CreateImport(context.Context, *CreateImportRequest) (*common.ResponseID, error)
	CreateOrder(context.Context, *order_service.CreateOrderCopyRequest) (*common.ResponseID, error)
	FinishImport(context.Context, *FinishImportReq) (*common.ResponseID, error)
	GetAllImport(context.Context, *common.SearchRequest) (*GetAllImportRes, error)
	GetImportByID(context.Context, *common.RequestID) (*ImportById, error)
	// supplier
	CreateSupplier(context.Context, *CreateSupplierRequest) (*common.ResponseID, error)
	GetAllSupplier(context.Context, *common.SearchRequest) (*GetAllSuppliersResponse, error)
	UpdateSupplier(context.Context, *UpdateSupplierRequest) (*common.ResponseID, error)
	GetSupplierById(context.Context, *common.RequestID) (*GetSupplierByIdResponse, error)
	Delete(context.Context, *common.RequestID) (*common.ResponseID, error)
	// supplierOrder
	CreateSupplierOrder(context.Context, *CreateSupplierOrderRequest) (*common.ResponseID, error)
	UpsertSupplierOrderItem(context.Context, *CreateSupplierOrderItemRequest) (*common.ResponseID, error)
	GetAllSupplierOrder(context.Context, *common.SupplierOrderSearchRequest) (*GetAllSupplierOrderResponse, error)
	GetAllSupplierOrderItems(context.Context, *GetAllSupplierOrderItemsRequest) (*GetAllSupplierOrderItemsResponse, error)
	GetSupplierOrderById(context.Context, *common.RequestID) (*GetSupplierOrderByIdResponse, error)
	UpdateSupplierOrderStatus(context.Context, *common.RequestID) (*common.ResponseID, error)
	FinishSupplierOrder(context.Context, *FinishSupplierOrderRequest) (*common.ResponseID, error)
	UpdateSupplierOrderAmount(context.Context, *UpdateSupplierOrderRecivedRequest) (*common.ResponseID, error)
	DeleteSupplierOrder(context.Context, *common.RequestID) (*common.ResponseID, error)
	DeleteSupplierOrderItemById(context.Context, *common.RequestID) (*common.Empty, error)
	DeleteSupplierOrders(context.Context, *common.RequestIDs) (*common.Empty, error)
	// product
	GetProductHistory(context.Context, *GetProductHistoryReq) (*GetProductHistoryRes, error)
	// exel download
	CreateDownloadExelTemplate(context.Context, *common.RequestID) (*common.ResponseID, error)
	CreateWriteOffExelTemplate(context.Context, *GetWriteOffReq) (*common.ResponseID, error)
	CreateTransfer(context.Context, *CreateTransferRequest) (*common.ResponseID, error)
	GetAllTransfer(context.Context, *GetAllTransferRequest) (*GetAllTransferResponse, error)
	GetAllTransferItems(context.Context, *GetAllTransferItemsRequest) (*GetAllTransferItemsResponse, error)
	AddItemToTransfer(context.Context, *AddItemToTransferRequest) (*common.ResponseID, error)
	// Write OFf
	CreateWriteOff(context.Context, *CreateWriteOffRequest) (*common.ResponseID, error)
	UpdateToWriteOff(context.Context, *UpdateWriteOffRequest) (*common.ResponseID, error)
	AddProductToWriteOff(context.Context, *AddProductToWriteOffRequest) (*common.ResponseID, error)
	DeleteProductWriteOff(context.Context, *AddProductToWriteOffRequest) (*common.ResponseID, error)
	FinishWriteOff(context.Context, *FinishWriteOffReq) (*common.ResponseID, error)
	GetAllWriteOff(context.Context, *GetAllWriteOffReq) (*GetAllWriteOffRes, error)
	GetWriteOffByid(context.Context, *GetWriteOffReq) (*GetWriteOffRes, error)
	GetWriteOffItems(context.Context, *GetWriteOffReq) (*GetWriteOffItemsRes, error)
	DeleteWriteOff(context.Context, *common.RequestID) (*common.ResponseID, error)
	// repricing
	GetRepricingByID(context.Context, *common.RequestID) (*GetRepricingByIDResponse, error)
	CreateRepricing(context.Context, *CreateRepricingRequest) (*common.ResponseID, error)
	GetAllRepricing(context.Context, *GetAllRepricingRequest) (*GetAllRepricingResponse, error)
	GetAllRepricingItems(context.Context, *GetAllRepricingItemsRequest) (*GetAllRepricingItemsResponse, error)
	UpsertMultiItemToRepricing(context.Context, *UpsertMultiItemRequest) (*common.ResponseID, error)
	FinishRepricing(context.Context, *FinishRepricingRequest) (*common.ResponseID, error)
	DeleteRepricing(context.Context, *common.RequestID) (*common.ResponseID, error)
	RepricingBulkChangePrice(context.Context, *BulkChangePriceRequest) (*common.ResponseID, error)
	DeleteRepricingItem(context.Context, *common.ItemIdRequest) (*common.ResponseID, error)
}

// UnimplementedInventoryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInventoryServiceServer struct {
}

func (UnimplementedInventoryServiceServer) CreateImport(context.Context, *CreateImportRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImport not implemented")
}
func (UnimplementedInventoryServiceServer) CreateOrder(context.Context, *order_service.CreateOrderCopyRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrder not implemented")
}
func (UnimplementedInventoryServiceServer) FinishImport(context.Context, *FinishImportReq) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishImport not implemented")
}
func (UnimplementedInventoryServiceServer) GetAllImport(context.Context, *common.SearchRequest) (*GetAllImportRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllImport not implemented")
}
func (UnimplementedInventoryServiceServer) GetImportByID(context.Context, *common.RequestID) (*ImportById, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetImportByID not implemented")
}
func (UnimplementedInventoryServiceServer) CreateSupplier(context.Context, *CreateSupplierRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupplier not implemented")
}
func (UnimplementedInventoryServiceServer) GetAllSupplier(context.Context, *common.SearchRequest) (*GetAllSuppliersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSupplier not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateSupplier(context.Context, *UpdateSupplierRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupplier not implemented")
}
func (UnimplementedInventoryServiceServer) GetSupplierById(context.Context, *common.RequestID) (*GetSupplierByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupplierById not implemented")
}
func (UnimplementedInventoryServiceServer) Delete(context.Context, *common.RequestID) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedInventoryServiceServer) CreateSupplierOrder(context.Context, *CreateSupplierOrderRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSupplierOrder not implemented")
}
func (UnimplementedInventoryServiceServer) UpsertSupplierOrderItem(context.Context, *CreateSupplierOrderItemRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertSupplierOrderItem not implemented")
}
func (UnimplementedInventoryServiceServer) GetAllSupplierOrder(context.Context, *common.SupplierOrderSearchRequest) (*GetAllSupplierOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSupplierOrder not implemented")
}
func (UnimplementedInventoryServiceServer) GetAllSupplierOrderItems(context.Context, *GetAllSupplierOrderItemsRequest) (*GetAllSupplierOrderItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllSupplierOrderItems not implemented")
}
func (UnimplementedInventoryServiceServer) GetSupplierOrderById(context.Context, *common.RequestID) (*GetSupplierOrderByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSupplierOrderById not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateSupplierOrderStatus(context.Context, *common.RequestID) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupplierOrderStatus not implemented")
}
func (UnimplementedInventoryServiceServer) FinishSupplierOrder(context.Context, *FinishSupplierOrderRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishSupplierOrder not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateSupplierOrderAmount(context.Context, *UpdateSupplierOrderRecivedRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSupplierOrderAmount not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteSupplierOrder(context.Context, *common.RequestID) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupplierOrder not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteSupplierOrderItemById(context.Context, *common.RequestID) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupplierOrderItemById not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteSupplierOrders(context.Context, *common.RequestIDs) (*common.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSupplierOrders not implemented")
}
func (UnimplementedInventoryServiceServer) GetProductHistory(context.Context, *GetProductHistoryReq) (*GetProductHistoryRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProductHistory not implemented")
}
func (UnimplementedInventoryServiceServer) CreateDownloadExelTemplate(context.Context, *common.RequestID) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDownloadExelTemplate not implemented")
}
func (UnimplementedInventoryServiceServer) CreateWriteOffExelTemplate(context.Context, *GetWriteOffReq) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWriteOffExelTemplate not implemented")
}
func (UnimplementedInventoryServiceServer) CreateTransfer(context.Context, *CreateTransferRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransfer not implemented")
}
func (UnimplementedInventoryServiceServer) GetAllTransfer(context.Context, *GetAllTransferRequest) (*GetAllTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTransfer not implemented")
}
func (UnimplementedInventoryServiceServer) GetAllTransferItems(context.Context, *GetAllTransferItemsRequest) (*GetAllTransferItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTransferItems not implemented")
}
func (UnimplementedInventoryServiceServer) AddItemToTransfer(context.Context, *AddItemToTransferRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItemToTransfer not implemented")
}
func (UnimplementedInventoryServiceServer) CreateWriteOff(context.Context, *CreateWriteOffRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWriteOff not implemented")
}
func (UnimplementedInventoryServiceServer) UpdateToWriteOff(context.Context, *UpdateWriteOffRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToWriteOff not implemented")
}
func (UnimplementedInventoryServiceServer) AddProductToWriteOff(context.Context, *AddProductToWriteOffRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProductToWriteOff not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteProductWriteOff(context.Context, *AddProductToWriteOffRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProductWriteOff not implemented")
}
func (UnimplementedInventoryServiceServer) FinishWriteOff(context.Context, *FinishWriteOffReq) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishWriteOff not implemented")
}
func (UnimplementedInventoryServiceServer) GetAllWriteOff(context.Context, *GetAllWriteOffReq) (*GetAllWriteOffRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllWriteOff not implemented")
}
func (UnimplementedInventoryServiceServer) GetWriteOffByid(context.Context, *GetWriteOffReq) (*GetWriteOffRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWriteOffByid not implemented")
}
func (UnimplementedInventoryServiceServer) GetWriteOffItems(context.Context, *GetWriteOffReq) (*GetWriteOffItemsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWriteOffItems not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteWriteOff(context.Context, *common.RequestID) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWriteOff not implemented")
}
func (UnimplementedInventoryServiceServer) GetRepricingByID(context.Context, *common.RequestID) (*GetRepricingByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepricingByID not implemented")
}
func (UnimplementedInventoryServiceServer) CreateRepricing(context.Context, *CreateRepricingRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepricing not implemented")
}
func (UnimplementedInventoryServiceServer) GetAllRepricing(context.Context, *GetAllRepricingRequest) (*GetAllRepricingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRepricing not implemented")
}
func (UnimplementedInventoryServiceServer) GetAllRepricingItems(context.Context, *GetAllRepricingItemsRequest) (*GetAllRepricingItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRepricingItems not implemented")
}
func (UnimplementedInventoryServiceServer) UpsertMultiItemToRepricing(context.Context, *UpsertMultiItemRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpsertMultiItemToRepricing not implemented")
}
func (UnimplementedInventoryServiceServer) FinishRepricing(context.Context, *FinishRepricingRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishRepricing not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteRepricing(context.Context, *common.RequestID) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepricing not implemented")
}
func (UnimplementedInventoryServiceServer) RepricingBulkChangePrice(context.Context, *BulkChangePriceRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepricingBulkChangePrice not implemented")
}
func (UnimplementedInventoryServiceServer) DeleteRepricingItem(context.Context, *common.ItemIdRequest) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepricingItem not implemented")
}

// UnsafeInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InventoryServiceServer will
// result in compilation errors.
type UnsafeInventoryServiceServer interface {
	mustEmbedUnimplementedInventoryServiceServer()
}

func RegisterInventoryServiceServer(s grpc.ServiceRegistrar, srv InventoryServiceServer) {
	s.RegisterService(&InventoryService_ServiceDesc, srv)
}

func _InventoryService_CreateImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/CreateImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateImport(ctx, req.(*CreateImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(order_service.CreateOrderCopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/CreateOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateOrder(ctx, req.(*order_service.CreateOrderCopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_FinishImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishImportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).FinishImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/FinishImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).FinishImport(ctx, req.(*FinishImportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetAllImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetAllImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/GetAllImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetAllImport(ctx, req.(*common.SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetImportByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetImportByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/GetImportByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetImportByID(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/CreateSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateSupplier(ctx, req.(*CreateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetAllSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetAllSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/GetAllSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetAllSupplier(ctx, req.(*common.SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateSupplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateSupplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/UpdateSupplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateSupplier(ctx, req.(*UpdateSupplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetSupplierById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetSupplierById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/GetSupplierById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetSupplierById(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).Delete(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateSupplierOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupplierOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateSupplierOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/CreateSupplierOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateSupplierOrder(ctx, req.(*CreateSupplierOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpsertSupplierOrderItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSupplierOrderItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpsertSupplierOrderItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/UpsertSupplierOrderItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpsertSupplierOrderItem(ctx, req.(*CreateSupplierOrderItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetAllSupplierOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.SupplierOrderSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetAllSupplierOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/GetAllSupplierOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetAllSupplierOrder(ctx, req.(*common.SupplierOrderSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetAllSupplierOrderItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllSupplierOrderItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetAllSupplierOrderItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/GetAllSupplierOrderItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetAllSupplierOrderItems(ctx, req.(*GetAllSupplierOrderItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetSupplierOrderById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetSupplierOrderById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/GetSupplierOrderById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetSupplierOrderById(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateSupplierOrderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateSupplierOrderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/UpdateSupplierOrderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateSupplierOrderStatus(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_FinishSupplierOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishSupplierOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).FinishSupplierOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/FinishSupplierOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).FinishSupplierOrder(ctx, req.(*FinishSupplierOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateSupplierOrderAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSupplierOrderRecivedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateSupplierOrderAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/UpdateSupplierOrderAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateSupplierOrderAmount(ctx, req.(*UpdateSupplierOrderRecivedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteSupplierOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteSupplierOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/DeleteSupplierOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteSupplierOrder(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteSupplierOrderItemById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteSupplierOrderItemById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/DeleteSupplierOrderItemById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteSupplierOrderItemById(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteSupplierOrders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteSupplierOrders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/DeleteSupplierOrders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteSupplierOrders(ctx, req.(*common.RequestIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetProductHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProductHistoryReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetProductHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/GetProductHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetProductHistory(ctx, req.(*GetProductHistoryReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateDownloadExelTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateDownloadExelTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/CreateDownloadExelTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateDownloadExelTemplate(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateWriteOffExelTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWriteOffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateWriteOffExelTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/CreateWriteOffExelTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateWriteOffExelTemplate(ctx, req.(*GetWriteOffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/CreateTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateTransfer(ctx, req.(*CreateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetAllTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetAllTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/GetAllTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetAllTransfer(ctx, req.(*GetAllTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetAllTransferItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllTransferItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetAllTransferItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/GetAllTransferItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetAllTransferItems(ctx, req.(*GetAllTransferItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_AddItemToTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemToTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AddItemToTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/AddItemToTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AddItemToTransfer(ctx, req.(*AddItemToTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateWriteOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWriteOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateWriteOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/CreateWriteOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateWriteOff(ctx, req.(*CreateWriteOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpdateToWriteOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWriteOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpdateToWriteOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/UpdateToWriteOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpdateToWriteOff(ctx, req.(*UpdateWriteOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_AddProductToWriteOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductToWriteOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).AddProductToWriteOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/AddProductToWriteOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).AddProductToWriteOff(ctx, req.(*AddProductToWriteOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteProductWriteOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductToWriteOffRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteProductWriteOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/DeleteProductWriteOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteProductWriteOff(ctx, req.(*AddProductToWriteOffRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_FinishWriteOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishWriteOffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).FinishWriteOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/FinishWriteOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).FinishWriteOff(ctx, req.(*FinishWriteOffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetAllWriteOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllWriteOffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetAllWriteOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/GetAllWriteOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetAllWriteOff(ctx, req.(*GetAllWriteOffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetWriteOffByid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWriteOffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetWriteOffByid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/GetWriteOffByid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetWriteOffByid(ctx, req.(*GetWriteOffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetWriteOffItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWriteOffReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetWriteOffItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/GetWriteOffItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetWriteOffItems(ctx, req.(*GetWriteOffReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteWriteOff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteWriteOff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/DeleteWriteOff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteWriteOff(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetRepricingByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetRepricingByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/GetRepricingByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetRepricingByID(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_CreateRepricing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepricingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).CreateRepricing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/CreateRepricing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).CreateRepricing(ctx, req.(*CreateRepricingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetAllRepricing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRepricingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetAllRepricing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/GetAllRepricing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetAllRepricing(ctx, req.(*GetAllRepricingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_GetAllRepricingItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRepricingItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).GetAllRepricingItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/GetAllRepricingItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).GetAllRepricingItems(ctx, req.(*GetAllRepricingItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_UpsertMultiItemToRepricing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpsertMultiItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).UpsertMultiItemToRepricing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/UpsertMultiItemToRepricing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).UpsertMultiItemToRepricing(ctx, req.(*UpsertMultiItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_FinishRepricing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishRepricingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).FinishRepricing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/FinishRepricing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).FinishRepricing(ctx, req.(*FinishRepricingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteRepricing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteRepricing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/DeleteRepricing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteRepricing(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_RepricingBulkChangePrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BulkChangePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).RepricingBulkChangePrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/RepricingBulkChangePrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).RepricingBulkChangePrice(ctx, req.(*BulkChangePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InventoryService_DeleteRepricingItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.ItemIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InventoryServiceServer).DeleteRepricingItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/InventoryService/DeleteRepricingItem",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InventoryServiceServer).DeleteRepricingItem(ctx, req.(*common.ItemIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InventoryService_ServiceDesc is the grpc.ServiceDesc for InventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "InventoryService",
	HandlerType: (*InventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateImport",
			Handler:    _InventoryService_CreateImport_Handler,
		},
		{
			MethodName: "CreateOrder",
			Handler:    _InventoryService_CreateOrder_Handler,
		},
		{
			MethodName: "FinishImport",
			Handler:    _InventoryService_FinishImport_Handler,
		},
		{
			MethodName: "GetAllImport",
			Handler:    _InventoryService_GetAllImport_Handler,
		},
		{
			MethodName: "GetImportByID",
			Handler:    _InventoryService_GetImportByID_Handler,
		},
		{
			MethodName: "CreateSupplier",
			Handler:    _InventoryService_CreateSupplier_Handler,
		},
		{
			MethodName: "GetAllSupplier",
			Handler:    _InventoryService_GetAllSupplier_Handler,
		},
		{
			MethodName: "UpdateSupplier",
			Handler:    _InventoryService_UpdateSupplier_Handler,
		},
		{
			MethodName: "GetSupplierById",
			Handler:    _InventoryService_GetSupplierById_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InventoryService_Delete_Handler,
		},
		{
			MethodName: "CreateSupplierOrder",
			Handler:    _InventoryService_CreateSupplierOrder_Handler,
		},
		{
			MethodName: "UpsertSupplierOrderItem",
			Handler:    _InventoryService_UpsertSupplierOrderItem_Handler,
		},
		{
			MethodName: "GetAllSupplierOrder",
			Handler:    _InventoryService_GetAllSupplierOrder_Handler,
		},
		{
			MethodName: "GetAllSupplierOrderItems",
			Handler:    _InventoryService_GetAllSupplierOrderItems_Handler,
		},
		{
			MethodName: "GetSupplierOrderById",
			Handler:    _InventoryService_GetSupplierOrderById_Handler,
		},
		{
			MethodName: "UpdateSupplierOrderStatus",
			Handler:    _InventoryService_UpdateSupplierOrderStatus_Handler,
		},
		{
			MethodName: "FinishSupplierOrder",
			Handler:    _InventoryService_FinishSupplierOrder_Handler,
		},
		{
			MethodName: "UpdateSupplierOrderAmount",
			Handler:    _InventoryService_UpdateSupplierOrderAmount_Handler,
		},
		{
			MethodName: "DeleteSupplierOrder",
			Handler:    _InventoryService_DeleteSupplierOrder_Handler,
		},
		{
			MethodName: "DeleteSupplierOrderItemById",
			Handler:    _InventoryService_DeleteSupplierOrderItemById_Handler,
		},
		{
			MethodName: "DeleteSupplierOrders",
			Handler:    _InventoryService_DeleteSupplierOrders_Handler,
		},
		{
			MethodName: "GetProductHistory",
			Handler:    _InventoryService_GetProductHistory_Handler,
		},
		{
			MethodName: "CreateDownloadExelTemplate",
			Handler:    _InventoryService_CreateDownloadExelTemplate_Handler,
		},
		{
			MethodName: "CreateWriteOffExelTemplate",
			Handler:    _InventoryService_CreateWriteOffExelTemplate_Handler,
		},
		{
			MethodName: "CreateTransfer",
			Handler:    _InventoryService_CreateTransfer_Handler,
		},
		{
			MethodName: "GetAllTransfer",
			Handler:    _InventoryService_GetAllTransfer_Handler,
		},
		{
			MethodName: "GetAllTransferItems",
			Handler:    _InventoryService_GetAllTransferItems_Handler,
		},
		{
			MethodName: "AddItemToTransfer",
			Handler:    _InventoryService_AddItemToTransfer_Handler,
		},
		{
			MethodName: "CreateWriteOff",
			Handler:    _InventoryService_CreateWriteOff_Handler,
		},
		{
			MethodName: "UpdateToWriteOff",
			Handler:    _InventoryService_UpdateToWriteOff_Handler,
		},
		{
			MethodName: "AddProductToWriteOff",
			Handler:    _InventoryService_AddProductToWriteOff_Handler,
		},
		{
			MethodName: "DeleteProductWriteOff",
			Handler:    _InventoryService_DeleteProductWriteOff_Handler,
		},
		{
			MethodName: "FinishWriteOff",
			Handler:    _InventoryService_FinishWriteOff_Handler,
		},
		{
			MethodName: "GetAllWriteOff",
			Handler:    _InventoryService_GetAllWriteOff_Handler,
		},
		{
			MethodName: "GetWriteOffByid",
			Handler:    _InventoryService_GetWriteOffByid_Handler,
		},
		{
			MethodName: "GetWriteOffItems",
			Handler:    _InventoryService_GetWriteOffItems_Handler,
		},
		{
			MethodName: "DeleteWriteOff",
			Handler:    _InventoryService_DeleteWriteOff_Handler,
		},
		{
			MethodName: "GetRepricingByID",
			Handler:    _InventoryService_GetRepricingByID_Handler,
		},
		{
			MethodName: "CreateRepricing",
			Handler:    _InventoryService_CreateRepricing_Handler,
		},
		{
			MethodName: "GetAllRepricing",
			Handler:    _InventoryService_GetAllRepricing_Handler,
		},
		{
			MethodName: "GetAllRepricingItems",
			Handler:    _InventoryService_GetAllRepricingItems_Handler,
		},
		{
			MethodName: "UpsertMultiItemToRepricing",
			Handler:    _InventoryService_UpsertMultiItemToRepricing_Handler,
		},
		{
			MethodName: "FinishRepricing",
			Handler:    _InventoryService_FinishRepricing_Handler,
		},
		{
			MethodName: "DeleteRepricing",
			Handler:    _InventoryService_DeleteRepricing_Handler,
		},
		{
			MethodName: "RepricingBulkChangePrice",
			Handler:    _InventoryService_RepricingBulkChangePrice_Handler,
		},
		{
			MethodName: "DeleteRepricingItem",
			Handler:    _InventoryService_DeleteRepricingItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "inventory_main.proto",
}
