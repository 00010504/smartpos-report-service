// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: validation_main.proto

package validation_service

import (
	context "context"
	common "genproto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ValidationServiceClient is the client API for ValidationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ValidationServiceClient interface {
	GetLogsByImportId(ctx context.Context, in *CreateImportErrorReq, opts ...grpc.CallOption) (*GetImportValidationLogsResponse, error)
	CreateImport(ctx context.Context, in *CreateImportReq, opts ...grpc.CallOption) (*CreateImportRes, error)
	ConfirmImport(ctx context.Context, in *ConfirmImportReq, opts ...grpc.CallOption) (*ConfirmImportReq, error)
	GetAllImportItems(ctx context.Context, in *GetAllImportItemsRequest, opts ...grpc.CallOption) (*GetAllImportItemsResponse, error)
	DownloadImportExelTemplate(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error)
}

type validationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidationServiceClient(cc grpc.ClientConnInterface) ValidationServiceClient {
	return &validationServiceClient{cc}
}

func (c *validationServiceClient) GetLogsByImportId(ctx context.Context, in *CreateImportErrorReq, opts ...grpc.CallOption) (*GetImportValidationLogsResponse, error) {
	out := new(GetImportValidationLogsResponse)
	err := c.cc.Invoke(ctx, "/ValidationService/GetLogsByImportId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validationServiceClient) CreateImport(ctx context.Context, in *CreateImportReq, opts ...grpc.CallOption) (*CreateImportRes, error) {
	out := new(CreateImportRes)
	err := c.cc.Invoke(ctx, "/ValidationService/CreateImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validationServiceClient) ConfirmImport(ctx context.Context, in *ConfirmImportReq, opts ...grpc.CallOption) (*ConfirmImportReq, error) {
	out := new(ConfirmImportReq)
	err := c.cc.Invoke(ctx, "/ValidationService/ConfirmImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validationServiceClient) GetAllImportItems(ctx context.Context, in *GetAllImportItemsRequest, opts ...grpc.CallOption) (*GetAllImportItemsResponse, error) {
	out := new(GetAllImportItemsResponse)
	err := c.cc.Invoke(ctx, "/ValidationService/GetAllImportItems", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *validationServiceClient) DownloadImportExelTemplate(ctx context.Context, in *common.RequestID, opts ...grpc.CallOption) (*common.ResponseID, error) {
	out := new(common.ResponseID)
	err := c.cc.Invoke(ctx, "/ValidationService/DownloadImportExelTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidationServiceServer is the server API for ValidationService service.
// All implementations should embed UnimplementedValidationServiceServer
// for forward compatibility
type ValidationServiceServer interface {
	GetLogsByImportId(context.Context, *CreateImportErrorReq) (*GetImportValidationLogsResponse, error)
	CreateImport(context.Context, *CreateImportReq) (*CreateImportRes, error)
	ConfirmImport(context.Context, *ConfirmImportReq) (*ConfirmImportReq, error)
	GetAllImportItems(context.Context, *GetAllImportItemsRequest) (*GetAllImportItemsResponse, error)
	DownloadImportExelTemplate(context.Context, *common.RequestID) (*common.ResponseID, error)
}

// UnimplementedValidationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedValidationServiceServer struct {
}

func (UnimplementedValidationServiceServer) GetLogsByImportId(context.Context, *CreateImportErrorReq) (*GetImportValidationLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogsByImportId not implemented")
}
func (UnimplementedValidationServiceServer) CreateImport(context.Context, *CreateImportReq) (*CreateImportRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateImport not implemented")
}
func (UnimplementedValidationServiceServer) ConfirmImport(context.Context, *ConfirmImportReq) (*ConfirmImportReq, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmImport not implemented")
}
func (UnimplementedValidationServiceServer) GetAllImportItems(context.Context, *GetAllImportItemsRequest) (*GetAllImportItemsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllImportItems not implemented")
}
func (UnimplementedValidationServiceServer) DownloadImportExelTemplate(context.Context, *common.RequestID) (*common.ResponseID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadImportExelTemplate not implemented")
}

// UnsafeValidationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ValidationServiceServer will
// result in compilation errors.
type UnsafeValidationServiceServer interface {
	mustEmbedUnimplementedValidationServiceServer()
}

func RegisterValidationServiceServer(s grpc.ServiceRegistrar, srv ValidationServiceServer) {
	s.RegisterService(&ValidationService_ServiceDesc, srv)
}

func _ValidationService_GetLogsByImportId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImportErrorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationServiceServer).GetLogsByImportId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ValidationService/GetLogsByImportId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationServiceServer).GetLogsByImportId(ctx, req.(*CreateImportErrorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidationService_CreateImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateImportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationServiceServer).CreateImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ValidationService/CreateImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationServiceServer).CreateImport(ctx, req.(*CreateImportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidationService_ConfirmImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmImportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationServiceServer).ConfirmImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ValidationService/ConfirmImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationServiceServer).ConfirmImport(ctx, req.(*ConfirmImportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidationService_GetAllImportItems_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllImportItemsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationServiceServer).GetAllImportItems(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ValidationService/GetAllImportItems",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationServiceServer).GetAllImportItems(ctx, req.(*GetAllImportItemsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ValidationService_DownloadImportExelTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.RequestID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidationServiceServer).DownloadImportExelTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ValidationService/DownloadImportExelTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidationServiceServer).DownloadImportExelTemplate(ctx, req.(*common.RequestID))
	}
	return interceptor(ctx, in, info, handler)
}

// ValidationService_ServiceDesc is the grpc.ServiceDesc for ValidationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ValidationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ValidationService",
	HandlerType: (*ValidationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogsByImportId",
			Handler:    _ValidationService_GetLogsByImportId_Handler,
		},
		{
			MethodName: "CreateImport",
			Handler:    _ValidationService_CreateImport_Handler,
		},
		{
			MethodName: "ConfirmImport",
			Handler:    _ValidationService_ConfirmImport_Handler,
		},
		{
			MethodName: "GetAllImportItems",
			Handler:    _ValidationService_GetAllImportItems_Handler,
		},
		{
			MethodName: "DownloadImportExelTemplate",
			Handler:    _ValidationService_DownloadImportExelTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "validation_main.proto",
}
